#version 330

in vec3 n_eye;
in vec3 FragPos;
in vec3 Normal;

uniform vec3 lightPos=vec3(1.2f, 1.0f, 2.0f);
uniform vec3 viewPos=vec3(0.0f, 0.0f,5.0f);//camera position
uniform vec3 objectColor=vec3(1.0f, 0.5f, 0.31f);//
uniform vec3 lightColor=vec3(1.0f, 1.0f, 1.0f);//white color

out vec4 frag_colour;

void main(){

	//ambient
	float ambientStrength=0.1f;
	vec3 ambient=ambientStrength*lightColor;

	// set important material values
    float roughnessValue = 0.5; // 0 : smooth, 1: rough
    float F0 = 0.8; // fresnel reflectance at normal incidence
    float k = 0.2; // fraction of diffuse reflection (specular reflection = 1 - k)
	
	//diffuse
	vec3 norm=normalize(Normal);
	vec3 lightDir=normalize(lightPos-FragPos);
	//float diff=max(dot(norm,lightDir),0);
	float NdotL=max(dot(norm,lightDir),0.0);
	float specular = 0.0;
	
	if( NdotL>0.0)
	{
		vec3 eyeDir=normalize(n_eye);
		// calculate intermediary values
        vec3 halfVector = normalize(lightDir + eyeDir);
        float NdotH = max(dot(norm, halfVector), 0.0); 
        float NdotV = max(dot(norm, eyeDir), 0.0);
        float VdotH = max(dot(eyeDir, halfVector), 0.0);
        float mSquared = roughnessValue * roughnessValue;

		// geometric attenuation
        float NH2 = 2.0 * NdotH;
        float g1 = (NH2 * NdotV) / VdotH;
        float g2 = (NH2 * NdotL) / VdotH;
        float geoAtt = min(1.0, min(g1, g2));
     
        // roughness (or: microfacet distribution function)
        // beckmann distribution function
        float r1 = 1.0 / ( 4.0 * mSquared * pow(NdotH, 4.0));
        float r2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);
        float roughness = r1 * exp(r2);
        
        // fresnel
        // Schlick approximation
        float fresnel = pow(1.0 - VdotH, 5.0);
        fresnel *= (1.0 - F0);
        fresnel += F0;

		specular =(fresnel * geoAtt * roughness) / (NdotV * NdotL * 3.14);
	}
	vec3 result = ambient*objectColor+lightColor * NdotL * (k + specular * (1.0 - k))*objectColor;
	//vec3 result = ambient*objectColor+lightColor * NdotL (k*NdotL*2 + specular * (1.0 - k)*2)*objectColor;
	frag_colour = vec4 (result, 1.0);
}